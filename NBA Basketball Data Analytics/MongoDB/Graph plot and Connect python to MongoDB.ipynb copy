{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab5a86ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install \"pymongo[srv]\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6631c68",
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install dnspython"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "129b1702",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MongoClient(host=['localhost:27017'], document_class=dict, tz_aware=False, connect=True)"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pymongo\n",
    "pymongo.MongoClient()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "0c25b5c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pymongo.mongo_client.MongoClient"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type( pymongo.MongoClient() )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "649a475b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pymongo import MongoClient\n",
    "\n",
    "client = MongoClient(\n",
    "    host = 'mongodb+srv://cluster0.c5pdm.mongodb.net/myFirstDatabase:27017', # <-- IP and port go here\n",
    "    serverSelectionTimeoutMS = 3000, # 3 second timeout\n",
    "    username=\"Praveen\",\n",
    "    password=\"***\",\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "b1afc3be",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'version': '4.4.10', 'gitVersion': '58971da1ef93435a9f62bf4708a81713def6e88c', 'modules': ['enterprise'], 'allocator': 'tcmalloc', 'javascriptEngine': 'mozjs', 'sysInfo': 'deprecated', 'versionArray': [4, 4, 10, 0], 'openssl': {'running': 'OpenSSL 1.0.1e-fips 11 Feb 2013', 'compiled': 'OpenSSL 1.0.1e-fips 11 Feb 2013'}, 'buildEnvironment': {'distmod': 'rhel70', 'distarch': 'x86_64', 'cc': '/opt/mongodbtoolchain/v3/bin/gcc: gcc (GCC) 8.5.0', 'ccflags': '-fno-omit-frame-pointer -fno-strict-aliasing -fasynchronous-unwind-tables -ggdb -pthread -Wall -Wsign-compare -Wno-unknown-pragmas -Winvalid-pch -Werror -O2 -Wno-unused-local-typedefs -Wno-unused-function -Wno-deprecated-declarations -Wno-unused-const-variable -Wno-unused-but-set-variable -Wno-missing-braces -fstack-protector-strong -fno-builtin-memcmp', 'cxx': '/opt/mongodbtoolchain/v3/bin/g++: g++ (GCC) 8.5.0', 'cxxflags': '-Woverloaded-virtual -Wno-maybe-uninitialized -fsized-deallocation -std=c++17', 'linkflags': '-pthread -Wl,-z,now -rdynamic -Wl,--fatal-warnings -fstack-protector-strong -fuse-ld=gold -Wl,--no-threads -Wl,--build-id -Wl,--hash-style=gnu -Wl,-z,noexecstack -Wl,--warn-execstack -Wl,-z,relro -Wl,-rpath,/usr/lib64/perl5/CORE -Wl,-z,origin -Wl,--enable-new-dtags', 'target_arch': 'x86_64', 'target_os': 'linux', 'cppdefines': 'SAFEINT_USE_INTRINSICS 0 PCRE_STATIC NDEBUG _XOPEN_SOURCE 700 _GNU_SOURCE _FORTIFY_SOURCE 2 BOOST_THREAD_VERSION 5 BOOST_THREAD_USES_DATETIME BOOST_SYSTEM_NO_DEPRECATED BOOST_MATH_NO_LONG_DOUBLE_MATH_FUNCTIONS BOOST_ENABLE_ASSERT_DEBUG_HANDLER BOOST_LOG_NO_SHORTHAND_NAMES BOOST_LOG_USE_NATIVE_SYSLOG BOOST_LOG_WITHOUT_THREAD_ATTR ABSL_FORCE_ALIGNED_ACCESS'}, 'bits': 64, 'debug': False, 'maxBsonObjectSize': 16777216, 'storageEngines': ['biggie', 'devnull', 'ephemeralForTest', 'inMemory', 'queryable_wt', 'wiredTiger'], 'ok': 1.0, '$clusterTime': {'clusterTime': Timestamp(1636217352, 2), 'signature': {'hash': b\"\\x9cF\\xc0\\x88\\xdc7\\x05\\xe5F7'\\xd4\\n\\x0b\\xef!'Zv'\", 'keyId': 6985618853581553669}}, 'operationTime': Timestamp(1636217352, 2)}\n"
     ]
    }
   ],
   "source": [
    "server_info = client.server_info()\n",
    "print (server_info)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "d370a7ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "server info keys: dict_keys(['version', 'gitVersion', 'modules', 'allocator', 'javascriptEngine', 'sysInfo', 'versionArray', 'openssl', 'buildEnvironment', 'bits', 'debug', 'maxBsonObjectSize', 'storageEngines', 'ok', '$clusterTime', 'operationTime'])\n"
     ]
    }
   ],
   "source": [
    "print (\"\\nserver info keys:\", server_info.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "33886b46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "server version: 4.4.10\n"
     ]
    }
   ],
   "source": [
    "print (\"\\nserver version:\", server_info[\"version\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "730246c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# connect to the mongoclient\n",
    "# get the database\n",
    "database = client['myFirstDatabase']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "f40af5d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "Game_Analysis = database.get_collection(\"basketball\")\n",
    "#Team_Analysis = database.get_collection(\"Team_Analysis\")\n",
    "#Player_Analysis = database.get_collection(\"Player_Analysis\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05cdd952",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Game_Analysis.aggregate([{ '$group':{ '_id' : '$LOCATION', 'sum' : { '$sum': \"$WIN_COUNT\" } }}])\n",
    "for i in x:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2352ab2",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Game_Analysis.find({'SEASON' : {'$gte': 2000}})\n",
    "for i in x:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0440ff7f",
   "metadata": {},
   "source": [
    "1.  The winning percentage of home team and away team over the years\n",
    "SELECT \n",
    "\tLOCATION\n",
    "\t,TEAM_NAME\n",
    "\t,SUM(WIN_COUNT)*100/SUM(GAME_COUNT) AS `WIN %`\n",
    "FROM \n",
    "\tgame_analysis\n",
    "WHERE \n",
    "\tSEASON >= 2000\n",
    "GROUP BY 1,2;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "227a8184",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Game_Analysis.aggregate(\n",
    "[\n",
    "  {\"$match\" : {'SEASON' : {'$gte': 2000}}\n",
    "  },\n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$LOCATION', '$TEAM_NAME'],\n",
    "      'WIN_COUNT': { '$sum': '$WIN_COUNT' },\n",
    "      'GAME_COUNT': { '$sum': '$GAME_COUNT' }\n",
    "    }\n",
    "  },\n",
    "  {\n",
    "    '$set': {\n",
    "      'win_percentage': {'$multiply':[{'$divide': ['$WIN_COUNT', '$GAME_COUNT']}, 100] }\n",
    "    }\n",
    "  }\n",
    "\n",
    "]\n",
    ")\n",
    "CNT = 0\n",
    "for i in x:\n",
    "    CNT+= 1\n",
    "    print(i)\n",
    "print(CNT)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcc39f91",
   "metadata": {},
   "source": [
    "2. \n",
    "-- Offensive and defensive metrics \n",
    "-- Defense Metrics\n",
    "SELECT \n",
    "\t`game_analysis`.`LOCATION` AS `LOCATION`,\n",
    "\t`game_analysis`.`TEAM_SLUG` AS `TEAM_SLUG`,\n",
    "\tAVG(`game_analysis`.`AVERAGE_NUMBER_OF_BLOCKS`) AS `AVERAGE_NUMBER_OF_BLOCKS`,\n",
    "\tAVG(`game_analysis`.`AVERAGE_NUMBER_OF_STEALS`) AS `AVERAGE_NUMBER_OF_STEALS`,\n",
    "\tAVG(`game_analysis`.`AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE`) AS `AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE`,\n",
    "\tAVG(`game_analysis`.`DEFENSIVE_REBOUND_PERCENTAGE`) AS `DEFENSIVE_REBOUND_PERCENTAGE`\n",
    "FROM \n",
    "\t`game_analysis`\n",
    "WHERE (`game_analysis`.`SEASON` >= '2000')\n",
    "GROUP BY 1,2;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3bf90207",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "x = Game_Analysis.aggregate(\n",
    "[\n",
    "  {\"$match\" : {'SEASON' : {'$gte': 2000}}\n",
    "  },\n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$LOCATION', '$TEAM_SLUG'],\n",
    "      'AVERAGE_NUMBER_OF_BLOCKS': { '$avg': '$AVERAGE_NUMBER_OF_BLOCKS' },\n",
    "      'AVERAGE_NUMBER_OF_STEALS': { '$avg': '$AVERAGE_NUMBER_OF_STEALS' },\n",
    "      'AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE': { '$avg': '$AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE' },\n",
    "      'DEFENSIVE_REBOUND_PERCENTAGE': { '$avg': '$DEFENSIVE_REBOUND_PERCENTAGE' }\n",
    "    }\n",
    "  }\n",
    "]\n",
    ")\n",
    "CNT = 0\n",
    "for i in x:\n",
    "    CNT+= 1\n",
    "    print(i)\n",
    "print(CNT)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "f99b88cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "4492f9f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>_id</th>\n",
       "      <th>AVERAGE_NUMBER_OF_BLOCKS</th>\n",
       "      <th>AVERAGE_NUMBER_OF_STEALS</th>\n",
       "      <th>AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE</th>\n",
       "      <th>DEFENSIVE_REBOUND_PERCENTAGE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>[AWAY, BOS]</td>\n",
       "      <td>4.390952</td>\n",
       "      <td>8.162381</td>\n",
       "      <td>0.169048</td>\n",
       "      <td>0.759048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>[HOME, LAC]</td>\n",
       "      <td>5.668095</td>\n",
       "      <td>7.340952</td>\n",
       "      <td>0.163810</td>\n",
       "      <td>0.749048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>[AWAY, GSW]</td>\n",
       "      <td>5.200476</td>\n",
       "      <td>8.177143</td>\n",
       "      <td>0.172857</td>\n",
       "      <td>0.743333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>[HOME, CLE]</td>\n",
       "      <td>5.126667</td>\n",
       "      <td>7.141905</td>\n",
       "      <td>0.161429</td>\n",
       "      <td>0.734286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>[HOME, BOS]</td>\n",
       "      <td>4.720952</td>\n",
       "      <td>8.252381</td>\n",
       "      <td>0.159524</td>\n",
       "      <td>0.759524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>[HOME, NOP]</td>\n",
       "      <td>5.151579</td>\n",
       "      <td>7.637895</td>\n",
       "      <td>0.155789</td>\n",
       "      <td>0.742105</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>[AWAY, HOU]</td>\n",
       "      <td>4.542857</td>\n",
       "      <td>7.573810</td>\n",
       "      <td>0.171429</td>\n",
       "      <td>0.747619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>[AWAY, CLE]</td>\n",
       "      <td>4.032857</td>\n",
       "      <td>7.242381</td>\n",
       "      <td>0.177619</td>\n",
       "      <td>0.734286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>[AWAY, DEN]</td>\n",
       "      <td>4.647143</td>\n",
       "      <td>8.159048</td>\n",
       "      <td>0.178095</td>\n",
       "      <td>0.725714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>[HOME, DEN]</td>\n",
       "      <td>5.948095</td>\n",
       "      <td>8.018095</td>\n",
       "      <td>0.155238</td>\n",
       "      <td>0.737619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>[None, None]</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>[AWAY, NOP]</td>\n",
       "      <td>4.806250</td>\n",
       "      <td>7.405000</td>\n",
       "      <td>0.165000</td>\n",
       "      <td>0.770000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>[HOME, GSW]</td>\n",
       "      <td>5.701429</td>\n",
       "      <td>8.309048</td>\n",
       "      <td>0.158095</td>\n",
       "      <td>0.738571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>[HOME, HOU]</td>\n",
       "      <td>5.061905</td>\n",
       "      <td>7.813810</td>\n",
       "      <td>0.160000</td>\n",
       "      <td>0.744286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>[HOME, CHI]</td>\n",
       "      <td>5.402381</td>\n",
       "      <td>7.402857</td>\n",
       "      <td>0.162381</td>\n",
       "      <td>0.733810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>[AWAY, DAL]</td>\n",
       "      <td>4.690000</td>\n",
       "      <td>7.184286</td>\n",
       "      <td>0.148571</td>\n",
       "      <td>0.762857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>[AWAY, CHI]</td>\n",
       "      <td>4.536667</td>\n",
       "      <td>7.329524</td>\n",
       "      <td>0.180476</td>\n",
       "      <td>0.740952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>[AWAY, LAC]</td>\n",
       "      <td>4.747143</td>\n",
       "      <td>7.289048</td>\n",
       "      <td>0.169048</td>\n",
       "      <td>0.745714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>[AWAY, LAL]</td>\n",
       "      <td>4.800000</td>\n",
       "      <td>7.477273</td>\n",
       "      <td>0.169091</td>\n",
       "      <td>0.756364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>[HOME, LAL]</td>\n",
       "      <td>5.273636</td>\n",
       "      <td>7.344545</td>\n",
       "      <td>0.161818</td>\n",
       "      <td>0.760000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>[AWAY, ATL]</td>\n",
       "      <td>4.888571</td>\n",
       "      <td>7.844286</td>\n",
       "      <td>0.187143</td>\n",
       "      <td>0.745714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>[HOME, ATL]</td>\n",
       "      <td>4.736667</td>\n",
       "      <td>7.676667</td>\n",
       "      <td>0.167619</td>\n",
       "      <td>0.743810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>[HOME, DAL]</td>\n",
       "      <td>5.072381</td>\n",
       "      <td>7.524762</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.750000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             _id  AVERAGE_NUMBER_OF_BLOCKS  AVERAGE_NUMBER_OF_STEALS  \\\n",
       "0    [AWAY, BOS]                  4.390952                  8.162381   \n",
       "1    [HOME, LAC]                  5.668095                  7.340952   \n",
       "2    [AWAY, GSW]                  5.200476                  8.177143   \n",
       "3    [HOME, CLE]                  5.126667                  7.141905   \n",
       "4    [HOME, BOS]                  4.720952                  8.252381   \n",
       "5    [HOME, NOP]                  5.151579                  7.637895   \n",
       "6    [AWAY, HOU]                  4.542857                  7.573810   \n",
       "7    [AWAY, CLE]                  4.032857                  7.242381   \n",
       "8    [AWAY, DEN]                  4.647143                  8.159048   \n",
       "9    [HOME, DEN]                  5.948095                  8.018095   \n",
       "10  [None, None]                       NaN                       NaN   \n",
       "11   [AWAY, NOP]                  4.806250                  7.405000   \n",
       "12   [HOME, GSW]                  5.701429                  8.309048   \n",
       "13   [HOME, HOU]                  5.061905                  7.813810   \n",
       "14   [HOME, CHI]                  5.402381                  7.402857   \n",
       "15   [AWAY, DAL]                  4.690000                  7.184286   \n",
       "16   [AWAY, CHI]                  4.536667                  7.329524   \n",
       "17   [AWAY, LAC]                  4.747143                  7.289048   \n",
       "18   [AWAY, LAL]                  4.800000                  7.477273   \n",
       "19   [HOME, LAL]                  5.273636                  7.344545   \n",
       "20   [AWAY, ATL]                  4.888571                  7.844286   \n",
       "21   [HOME, ATL]                  4.736667                  7.676667   \n",
       "22   [HOME, DAL]                  5.072381                  7.524762   \n",
       "\n",
       "    AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE  DEFENSIVE_REBOUND_PERCENTAGE  \n",
       "0                                   0.169048                      0.759048  \n",
       "1                                   0.163810                      0.749048  \n",
       "2                                   0.172857                      0.743333  \n",
       "3                                   0.161429                      0.734286  \n",
       "4                                   0.159524                      0.759524  \n",
       "5                                   0.155789                      0.742105  \n",
       "6                                   0.171429                      0.747619  \n",
       "7                                   0.177619                      0.734286  \n",
       "8                                   0.178095                      0.725714  \n",
       "9                                   0.155238                      0.737619  \n",
       "10                                       NaN                           NaN  \n",
       "11                                  0.165000                      0.770000  \n",
       "12                                  0.158095                      0.738571  \n",
       "13                                  0.160000                      0.744286  \n",
       "14                                  0.162381                      0.733810  \n",
       "15                                  0.148571                      0.762857  \n",
       "16                                  0.180476                      0.740952  \n",
       "17                                  0.169048                      0.745714  \n",
       "18                                  0.169091                      0.756364  \n",
       "19                                  0.161818                      0.760000  \n",
       "20                                  0.187143                      0.745714  \n",
       "21                                  0.167619                      0.743810  \n",
       "22                                  0.142857                      0.750000  "
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.DataFrame(list(Game_Analysis.aggregate(\n",
    "[\n",
    "  {\"$match\" : {'SEASON' : {'$gte': 2000}}\n",
    "  },\n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$LOCATION','$TEAM_SLUG'], \n",
    "      'AVERAGE_NUMBER_OF_BLOCKS': { '$avg': '$AVERAGE_NUMBER_OF_BLOCKS' },\n",
    "      'AVERAGE_NUMBER_OF_STEALS': { '$avg': '$AVERAGE_NUMBER_OF_STEALS' },\n",
    "      'AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE': { '$avg': '$AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE' },\n",
    "      'DEFENSIVE_REBOUND_PERCENTAGE': { '$avg': '$DEFENSIVE_REBOUND_PERCENTAGE' }\n",
    "    }\n",
    "  }\n",
    "]\n",
    ")))\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "0c8b4326",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Int64Index([], dtype='int64')\n"
     ]
    }
   ],
   "source": [
    "index_names = data[ data['AVERAGE_NUMBER_OF_BLOCKS'] == 'NaN' ].index\n",
    "print(index_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "785fecba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AVERAGE_NUMBER_OF_BLOCKS</th>\n",
       "      <th>AVERAGE_NUMBER_OF_STEALS</th>\n",
       "      <th>AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE</th>\n",
       "      <th>DEFENSIVE_REBOUND_PERCENTAGE</th>\n",
       "      <th>Location</th>\n",
       "      <th>TEA_SLAG</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.390952</td>\n",
       "      <td>8.162381</td>\n",
       "      <td>0.169048</td>\n",
       "      <td>0.759048</td>\n",
       "      <td>AWAY</td>\n",
       "      <td>BOS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.668095</td>\n",
       "      <td>7.340952</td>\n",
       "      <td>0.163810</td>\n",
       "      <td>0.749048</td>\n",
       "      <td>HOME</td>\n",
       "      <td>LAC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.200476</td>\n",
       "      <td>8.177143</td>\n",
       "      <td>0.172857</td>\n",
       "      <td>0.743333</td>\n",
       "      <td>AWAY</td>\n",
       "      <td>GSW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.126667</td>\n",
       "      <td>7.141905</td>\n",
       "      <td>0.161429</td>\n",
       "      <td>0.734286</td>\n",
       "      <td>HOME</td>\n",
       "      <td>CLE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.720952</td>\n",
       "      <td>8.252381</td>\n",
       "      <td>0.159524</td>\n",
       "      <td>0.759524</td>\n",
       "      <td>HOME</td>\n",
       "      <td>BOS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5.151579</td>\n",
       "      <td>7.637895</td>\n",
       "      <td>0.155789</td>\n",
       "      <td>0.742105</td>\n",
       "      <td>HOME</td>\n",
       "      <td>NOP</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4.542857</td>\n",
       "      <td>7.573810</td>\n",
       "      <td>0.171429</td>\n",
       "      <td>0.747619</td>\n",
       "      <td>AWAY</td>\n",
       "      <td>HOU</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>4.032857</td>\n",
       "      <td>7.242381</td>\n",
       "      <td>0.177619</td>\n",
       "      <td>0.734286</td>\n",
       "      <td>AWAY</td>\n",
       "      <td>CLE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>4.647143</td>\n",
       "      <td>8.159048</td>\n",
       "      <td>0.178095</td>\n",
       "      <td>0.725714</td>\n",
       "      <td>AWAY</td>\n",
       "      <td>DEN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5.948095</td>\n",
       "      <td>8.018095</td>\n",
       "      <td>0.155238</td>\n",
       "      <td>0.737619</td>\n",
       "      <td>HOME</td>\n",
       "      <td>DEN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>4.806250</td>\n",
       "      <td>7.405000</td>\n",
       "      <td>0.165000</td>\n",
       "      <td>0.770000</td>\n",
       "      <td>AWAY</td>\n",
       "      <td>NOP</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5.701429</td>\n",
       "      <td>8.309048</td>\n",
       "      <td>0.158095</td>\n",
       "      <td>0.738571</td>\n",
       "      <td>HOME</td>\n",
       "      <td>GSW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>5.061905</td>\n",
       "      <td>7.813810</td>\n",
       "      <td>0.160000</td>\n",
       "      <td>0.744286</td>\n",
       "      <td>HOME</td>\n",
       "      <td>HOU</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>5.402381</td>\n",
       "      <td>7.402857</td>\n",
       "      <td>0.162381</td>\n",
       "      <td>0.733810</td>\n",
       "      <td>HOME</td>\n",
       "      <td>CHI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>4.690000</td>\n",
       "      <td>7.184286</td>\n",
       "      <td>0.148571</td>\n",
       "      <td>0.762857</td>\n",
       "      <td>AWAY</td>\n",
       "      <td>DAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>4.536667</td>\n",
       "      <td>7.329524</td>\n",
       "      <td>0.180476</td>\n",
       "      <td>0.740952</td>\n",
       "      <td>AWAY</td>\n",
       "      <td>CHI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>4.747143</td>\n",
       "      <td>7.289048</td>\n",
       "      <td>0.169048</td>\n",
       "      <td>0.745714</td>\n",
       "      <td>AWAY</td>\n",
       "      <td>LAC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>4.800000</td>\n",
       "      <td>7.477273</td>\n",
       "      <td>0.169091</td>\n",
       "      <td>0.756364</td>\n",
       "      <td>AWAY</td>\n",
       "      <td>LAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>5.273636</td>\n",
       "      <td>7.344545</td>\n",
       "      <td>0.161818</td>\n",
       "      <td>0.760000</td>\n",
       "      <td>HOME</td>\n",
       "      <td>LAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>4.888571</td>\n",
       "      <td>7.844286</td>\n",
       "      <td>0.187143</td>\n",
       "      <td>0.745714</td>\n",
       "      <td>AWAY</td>\n",
       "      <td>ATL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4.736667</td>\n",
       "      <td>7.676667</td>\n",
       "      <td>0.167619</td>\n",
       "      <td>0.743810</td>\n",
       "      <td>HOME</td>\n",
       "      <td>ATL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>5.072381</td>\n",
       "      <td>7.524762</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.750000</td>\n",
       "      <td>HOME</td>\n",
       "      <td>DAL</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    AVERAGE_NUMBER_OF_BLOCKS  AVERAGE_NUMBER_OF_STEALS  \\\n",
       "0                   4.390952                  8.162381   \n",
       "1                   5.668095                  7.340952   \n",
       "2                   5.200476                  8.177143   \n",
       "3                   5.126667                  7.141905   \n",
       "4                   4.720952                  8.252381   \n",
       "5                   5.151579                  7.637895   \n",
       "6                   4.542857                  7.573810   \n",
       "7                   4.032857                  7.242381   \n",
       "8                   4.647143                  8.159048   \n",
       "9                   5.948095                  8.018095   \n",
       "11                  4.806250                  7.405000   \n",
       "12                  5.701429                  8.309048   \n",
       "13                  5.061905                  7.813810   \n",
       "14                  5.402381                  7.402857   \n",
       "15                  4.690000                  7.184286   \n",
       "16                  4.536667                  7.329524   \n",
       "17                  4.747143                  7.289048   \n",
       "18                  4.800000                  7.477273   \n",
       "19                  5.273636                  7.344545   \n",
       "20                  4.888571                  7.844286   \n",
       "21                  4.736667                  7.676667   \n",
       "22                  5.072381                  7.524762   \n",
       "\n",
       "    AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE  DEFENSIVE_REBOUND_PERCENTAGE  \\\n",
       "0                                   0.169048                      0.759048   \n",
       "1                                   0.163810                      0.749048   \n",
       "2                                   0.172857                      0.743333   \n",
       "3                                   0.161429                      0.734286   \n",
       "4                                   0.159524                      0.759524   \n",
       "5                                   0.155789                      0.742105   \n",
       "6                                   0.171429                      0.747619   \n",
       "7                                   0.177619                      0.734286   \n",
       "8                                   0.178095                      0.725714   \n",
       "9                                   0.155238                      0.737619   \n",
       "11                                  0.165000                      0.770000   \n",
       "12                                  0.158095                      0.738571   \n",
       "13                                  0.160000                      0.744286   \n",
       "14                                  0.162381                      0.733810   \n",
       "15                                  0.148571                      0.762857   \n",
       "16                                  0.180476                      0.740952   \n",
       "17                                  0.169048                      0.745714   \n",
       "18                                  0.169091                      0.756364   \n",
       "19                                  0.161818                      0.760000   \n",
       "20                                  0.187143                      0.745714   \n",
       "21                                  0.167619                      0.743810   \n",
       "22                                  0.142857                      0.750000   \n",
       "\n",
       "   Location TEA_SLAG  \n",
       "0      AWAY      BOS  \n",
       "1      HOME      LAC  \n",
       "2      AWAY      GSW  \n",
       "3      HOME      CLE  \n",
       "4      HOME      BOS  \n",
       "5      HOME      NOP  \n",
       "6      AWAY      HOU  \n",
       "7      AWAY      CLE  \n",
       "8      AWAY      DEN  \n",
       "9      HOME      DEN  \n",
       "11     AWAY      NOP  \n",
       "12     HOME      GSW  \n",
       "13     HOME      HOU  \n",
       "14     HOME      CHI  \n",
       "15     AWAY      DAL  \n",
       "16     AWAY      CHI  \n",
       "17     AWAY      LAC  \n",
       "18     AWAY      LAL  \n",
       "19     HOME      LAL  \n",
       "20     AWAY      ATL  \n",
       "21     HOME      ATL  \n",
       "22     HOME      DAL  "
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['_id'] = data['_id'].apply(lambda x: str(x).replace('[', '') if '[' in str(x) else str(x))\n",
    "data['_id'] = data['_id'].apply(lambda x: str(x).replace(']', '') if ']' in str(x) else str(x))\n",
    "data['_id'] = data['_id'].apply(lambda x: str(x).replace(\"'\", '') if \"'\" in str(x) else str(x))\n",
    "data[['Location','TEA_SLAG']] = data['_id'].str.split(',', expand=True)\n",
    "data.dropna(subset=[\"AVERAGE_NUMBER_OF_BLOCKS\"], inplace=True)\n",
    "#index_names = data[ data['_id'] == 'NaN' ].index\n",
    "#data.drop(index_names, inplace = True)\n",
    "data.drop(['_id'],axis=1,inplace=True)\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "a91ae98a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2520x1080 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(35, 15))\n",
    "x = data.iloc[:,-1].values\n",
    "y1 = data.iloc[:,[0,1]].values\n",
    "y2 = data.iloc[:,[1,2]].values\n",
    "y3 = data.iloc[:,[2,3]].values\n",
    "y4 = data.iloc[:,[3,4]].values\n",
    "l = data.iloc[:,-2].values\n",
    "\n",
    "plt.subplot(3,1,3)\n",
    "plt.plot(x,y1)\n",
    "plt.legend(l)\n",
    "plt.ylabel('AVERAGE_NUMBER_OF_BLOCKS')\n",
    "plt.subplot(3,1,2)\n",
    "plt.plot(x,y2)\n",
    "plt.legend(l)\n",
    "plt.ylabel('AVERAGE_NUMBER_OF_STEALS')\n",
    "plt.subplot(3,1,1)\n",
    "plt.plot(x,y3)\n",
    "plt.legend(l)\n",
    "plt.ylabel('AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE')\n",
    "#plt.subplot(4,1,1)\n",
    "#plt.plot(x,y4)\n",
    "#plt.ylabel('DEFENSIVE_REBOUND_PERCENTAGE')\n",
    "\n",
    "plt.title('Code & Results - Defensive strategy metrics')\n",
    "plt.xlabel('TEAM_SLAG')\n",
    "plt.legend(l)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "915a3efd",
   "metadata": {},
   "source": [
    "3. -- Offense Metrics\n",
    "SELECT \n",
    "\t`game_analysis`.`LOCATION` AS `LOCATION`,\n",
    "\t`game_analysis`.`TEAM_SLUG` AS `TEAM_SLUG`,\n",
    "\tAVG(`game_analysis`.`AVERAGE_2ND_CHANCE_POINTS`) AS `AVERAGE_2ND_CHANCE_POINTS`,\n",
    "\tAVG(`game_analysis`.`AVERAGE_ASSISTS`) AS `AVERAGE_ASSISTS`,\n",
    "\tAVG(`game_analysis`.`AVERAGE_PAINT_POINTS`) AS `AVERAGE_PAINT_POINTS`,\n",
    "\tAVG(`game_analysis`.`OFFENSIVE_REBOUND_PERCENTAGE`) AS `OFFENSIVE_REBOUND_PERCENTAGE`\n",
    "FROM\n",
    "\t`game_analysis`\n",
    "WHERE (`game_analysis`.`SEASON` >= '2000')\n",
    "GROUP BY 1,2;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1303f902",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Game_Analysis.aggregate(\n",
    "[\n",
    "  {\"$match\" : {'SEASON' : {'$gte': 2000}}\n",
    "  },\n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$LOCATION', '$TEAM_SLUG'],\n",
    "      'AVERAGE_2ND_CHANCE_POINTS': { '$avg': '$AVERAGE_2ND_CHANCE_POINTS' },\n",
    "      'AVERAGE_ASSISTS': { '$avg': '$AVERAGE_ASSISTS' },\n",
    "      'AVERAGE_PAINT_POINTS': { '$avg': '$AVERAGE_PAINT_POINTS' },\n",
    "      'OFFENSIVE_REBOUND_PERCENTAGE': { '$avg': '$OFFENSIVE_REBOUND_PERCENTAGE' }\n",
    "    }\n",
    "  }\n",
    "]\n",
    ")\n",
    "CNT = 0\n",
    "for i in x:\n",
    "    CNT+= 1\n",
    "    print(i)\n",
    "print(CNT)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "765e0c69",
   "metadata": {},
   "source": [
    "4. \n",
    "-- Point distribution of top 5 and bottom 5 teams\n",
    "-- Top 5 teams - Point Distribution %\n",
    "SELECT `game_analysis`.`TEAM_SLUG` AS `TEAM_SLUG`,\n",
    "  AVG(`game_analysis`.`AVERAGE_2ND_CHANCE_POINTS`) AS `AVERAGE_2ND_CHANCE_POINTS`,\n",
    "  AVG(`game_analysis`.`AVERAGE_2_POINT_GOAL_PERCENTAGE`) AS `AVERAGE_2_POINT_GOAL_PERCENTAGE`,\n",
    "  AVG(`game_analysis`.`AVERAGE_3_POINT_GOAL_PERCENTAGE`) AS `AVERAGE_3_POINT_GOAL_PERCENTAGE`,\n",
    "  AVG(`game_analysis`.`AVERAGE_PAINT_POINTS`) AS `AVERAGE_PAINT_POINTS`,\n",
    "  AVG(`game_analysis`.`AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE`) AS `AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE`,\n",
    "  SUM(WIN_COUNT)*100/SUM(GAME_COUNT) AS `$__alias__0`\n",
    "FROM `game_analysis`\n",
    "WHERE (`game_analysis`.`SEASON` >= '2000')\n",
    "GROUP BY 1\n",
    "ORDER BY `$__alias__0` DESC,`TEAM_SLUG` ASC\n",
    "LIMIT 5;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c949ab27",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Game_Analysis.aggregate(\n",
    "[\n",
    "  {\"$match\" : {'SEASON' : {'$gte': 2000}}\n",
    "  },\n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$TEAM_SLUG'],\n",
    "      'AVERAGE_2ND_CHANCE_POINTS': { '$avg': '$AVERAGE_2ND_CHANCE_POINTS' },\n",
    "      'AVERAGE_2_POINT_GOAL_PERCENTAGE': { '$avg': '$AVERAGE_2_POINT_GOAL_PERCENTAGE' },\n",
    "      'AVERAGE_3_POINT_GOAL_PERCENTAGE': { '$avg': '$AVERAGE_3_POINT_GOAL_PERCENTAGE' },\n",
    "      'AVERAGE_PAINT_POINTS': { '$avg': '$AVERAGE_PAINT_POINTS' },\n",
    "      'AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE': { '$avg': '$AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE' },\n",
    "      'WIN_COUNT': { '$sum': '$WIN_COUNT' },\n",
    "      'GAME_COUNT': { '$sum': '$GAME_COUNT' }\n",
    "    }\n",
    "  },\n",
    "  {\n",
    "    '$set': {\n",
    "      'win_percentage': {'$multiply':[{'$divide': ['$WIN_COUNT', '$GAME_COUNT']}, 100] }\n",
    "    }\n",
    "  },\n",
    "  { '$sort' : {'win_percentage':-1, 'TEAM_SLUG':1} },\n",
    "  { '$limit' : 5 }\n",
    "]\n",
    ")\n",
    "CNT = 0\n",
    "for i in x:\n",
    "    CNT+= 1\n",
    "    print(i)\n",
    "print(CNT)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef7d0fcf",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.DataFrame(list(Game_Analysis.aggregate(\n",
    "[\n",
    "  {\"$match\" : {'SEASON' : {'$gte': 2000}}\n",
    "  },\n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$TEAM_SLUG'],\n",
    "      'AVERAGE_2ND_CHANCE_POINTS': { '$avg': '$AVERAGE_2ND_CHANCE_POINTS' },\n",
    "      'AVERAGE_2_POINT_GOAL_PERCENTAGE': { '$avg': '$AVERAGE_2_POINT_GOAL_PERCENTAGE' },\n",
    "      'AVERAGE_3_POINT_GOAL_PERCENTAGE': { '$avg': '$AVERAGE_3_POINT_GOAL_PERCENTAGE' },\n",
    "      'AVERAGE_PAINT_POINTS': { '$avg': '$AVERAGE_PAINT_POINTS' },\n",
    "      'AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE': { '$avg': '$AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE' },\n",
    "      'WIN_COUNT': { '$sum': '$WIN_COUNT' },\n",
    "      'GAME_COUNT': { '$sum': '$GAME_COUNT' }\n",
    "    }\n",
    "  },\n",
    "  {\n",
    "    '$set': {\n",
    "      'win_percentage': {'$multiply':[{'$divide': ['$WIN_COUNT', '$GAME_COUNT']}, 100] }\n",
    "    }\n",
    "  },\n",
    "  { '$sort' : {'win_percentage':1, 'TEAM_SLUG':1} },\n",
    "  { '$limit' : 5 }\n",
    "]\n",
    ")))\n",
    "print(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "371e749f",
   "metadata": {},
   "source": [
    "5. \n",
    "-- Bottom 5 teams - Point Distribution %\n",
    "SELECT `game_analysis`.`TEAM_SLUG` AS `TEAM_SLUG`,\n",
    "  AVG(`game_analysis`.`AVERAGE_2ND_CHANCE_POINTS`) AS `AVERAGE_2ND_CHANCE_POINTS`,\n",
    "  AVG(`game_analysis`.`AVERAGE_2_POINT_GOAL_PERCENTAGE`) AS `AVERAGE_2_POINT_GOAL_PERCENTAGE`,\n",
    "  AVG(`game_analysis`.`AVERAGE_3_POINT_GOAL_PERCENTAGE`) AS `AVERAGE_3_POINT_GOAL_PERCENTAGE`,\n",
    "  AVG(`game_analysis`.`AVERAGE_PAINT_POINTS`) AS `AVERAGE_PAINT_POINTS`,\n",
    "  AVG(`game_analysis`.`AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE`) AS `AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE`,\n",
    "  SUM(WIN_COUNT)*100/SUM(GAME_COUNT) AS `$__alias__0`\n",
    "FROM `game_analysis`\n",
    "WHERE (`game_analysis`.`SEASON` >= '2000')\n",
    "GROUP BY 1\n",
    "ORDER BY `$__alias__0` ASC,`TEAM_SLUG` ASC\n",
    "LIMIT 5;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abc03548",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Game_Analysis.aggregate(\n",
    "[\n",
    "  {\"$match\" : {'SEASON' : {'$gte': 2000}}\n",
    "  },\n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$TEAM_SLUG'],\n",
    "      'AVERAGE_2ND_CHANCE_POINTS': { '$avg': '$AVERAGE_2ND_CHANCE_POINTS' },\n",
    "      'AVERAGE_2_POINT_GOAL_PERCENTAGE': { '$avg': '$AVERAGE_2_POINT_GOAL_PERCENTAGE' },\n",
    "      'AVERAGE_3_POINT_GOAL_PERCENTAGE': { '$avg': '$AVERAGE_3_POINT_GOAL_PERCENTAGE' },\n",
    "      'AVERAGE_PAINT_POINTS': { '$avg': '$AVERAGE_PAINT_POINTS' },\n",
    "      'AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE': { '$avg': '$AVERAGE_POINTS_AFTER_TURNOVER_PERCENTAGE' },\n",
    "      'WIN_COUNT': { '$sum': '$WIN_COUNT' },\n",
    "      'GAME_COUNT': { '$sum': '$GAME_COUNT' }\n",
    "    }\n",
    "  },\n",
    "  {\n",
    "    '$set': {\n",
    "      'win_percentage': {'$multiply':[{'$divide': ['$WIN_COUNT', '$GAME_COUNT']}, 100] }\n",
    "    }\n",
    "  },\n",
    "  { '$sort' : {'win_percentage':1, 'TEAM_SLUG':1} },\n",
    "  { '$limit' : 5 }\n",
    "]\n",
    ")\n",
    "CNT = 0\n",
    "for i in x:\n",
    "    CNT+= 1\n",
    "    print(i)\n",
    "print(CNT)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1f4a1f6",
   "metadata": {},
   "source": [
    "\"\"\"6. \n",
    "-- Offensive rebound % over years vs win %\n",
    "SELECT \n",
    "\t`game_analysis`.`SEASON` AS `SEASON`,\n",
    "\tAVG((`game_analysis`.`WIN_COUNT` / `game_analysis`.`GAME_COUNT`)) AS `WIN %`,\n",
    "\tAVG(`game_analysis`.`OFFENSIVE_REBOUND_PERCENTAGE`) AS `OFFENSIVE_REBOUND_PERCENTAGE`\n",
    "FROM \n",
    "\t`game_analysis`\n",
    "WHERE (`game_analysis`.`SEASON` >= '2000')\n",
    "GROUP BY 1;\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f04a6b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Game_Analysis.aggregate(\n",
    "[\n",
    "  {\"$match\" : {'SEASON' : {'$gte': 2000}}\n",
    "  },\n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$SEASON'],\n",
    "      'WIN %': { '$avg': {'$divide': ['$WIN_COUNT', '$GAME_COUNT']}},\n",
    "      'OFFENSIVE_REBOUND_PERCENTAGE': { '$avg': '$OFFENSIVE_REBOUND_PERCENTAGE' }\n",
    "    }\n",
    "  }\n",
    "]\n",
    ")\n",
    "CNT = 0\n",
    "for i in x:\n",
    "    CNT+= 1\n",
    "    print(i)\n",
    "print(CNT)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51669a99",
   "metadata": {},
   "source": [
    "7. \n",
    "-- 3 point efficiency and win %\n",
    "SELECT \n",
    "\t`game_analysis`.`TEAM_SLUG` AS `TEAM_SLUG`,\n",
    "\tAVG(`game_analysis`.`AVERAGE_3_POINT_GOAL_EFFICIENCY`) AS `AVERAGE_3_POINT_GOAL_EFFICIENCY`,\n",
    "\tAVG((`game_analysis`.`WIN_COUNT` / `game_analysis`.`GAME_COUNT`)) AS `WIN %`\n",
    "FROM \n",
    "\t`game_analysis`\n",
    "WHERE (`game_analysis`.`SEASON` >= '2000')\n",
    "GROUP BY 1;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "568d199f",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Game_Analysis.aggregate(\n",
    "[\n",
    "  {\"$match\" : {'SEASON' : {'$gte': 2000}}\n",
    "  },\n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$TEAM_SLUG'],\n",
    "      'AVERAGE_3_POINT_GOAL_EFFICIENCY': { '$avg': '$AVERAGE_3_POINT_GOAL_EFFICIENCY' },\n",
    "      'WIN %': { '$avg': {'$divide': ['$WIN_COUNT', '$GAME_COUNT']}}\n",
    "    }\n",
    "  }\n",
    "]\n",
    ")\n",
    "CNT = 0\n",
    "for i in x:\n",
    "    CNT+= 1\n",
    "    print(i)\n",
    "print(CNT)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6881727e",
   "metadata": {},
   "source": [
    "8. \n",
    "-- Free throw goal efficiency all the teams \n",
    "SELECT \n",
    "\t`game_analysis`.`TEAM_SLUG` AS `TEAM_SLUG`,\n",
    "\tAVG((`game_analysis`.`WIN_COUNT` / `game_analysis`.`GAME_COUNT`)) AS `WIN %`,\n",
    "\tAVG(`game_analysis`.`FREE_THROUGH_GOAL_EFFICIENCY`) AS `FREE_THROUGH_GOAL_EFFICIENCY`\n",
    "FROM \n",
    "\t`game_analysis`\n",
    "WHERE (`game_analysis`.`SEASON` >= '2000')\n",
    "GROUP BY 1;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0ff23ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Game_Analysis.aggregate(\n",
    "[\n",
    "  {\"$match\" : {'SEASON' : {'$gte': 2000}}\n",
    "  },\n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$TEAM_SLUG'],\n",
    "      'WIN %': { '$avg': {'$divide': ['$WIN_COUNT', '$GAME_COUNT']}},\n",
    "      'FREE_THROUGH_GOAL_EFFICIENCY': { '$avg': '$FREE_THROUGH_GOAL_EFFICIENCY' }\n",
    "    }\n",
    "  }\n",
    "]\n",
    ")\n",
    "CNT = 0\n",
    "for i in x:\n",
    "    CNT+= 1\n",
    "    print(i)\n",
    "print(CNT)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d9288f0",
   "metadata": {},
   "source": [
    "9.\n",
    "-- Free throw goal percentage all the teams \n",
    "SELECT \n",
    "\t`game_analysis`.`TEAM_SLUG` AS `TEAM_SLUG`,\n",
    "\tAVG((`game_analysis`.`WIN_COUNT` / `game_analysis`.`GAME_COUNT`)) AS `WIN %`,\n",
    "\tAVG(`game_analysis`.`FREE_THROUGH_GOAL_PERCENTAGE`) AS `FREE_THROUGH_GOAL_PERCENTAGE`\n",
    "FROM \n",
    "\t`game_analysis`\n",
    "WHERE (`game_analysis`.`SEASON` >= '2000')\n",
    "GROUP BY 1;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e335cbb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Game_Analysis.aggregate(\n",
    "[\n",
    "  {\"$match\" : {'SEASON' : {'$gte': 2000}}\n",
    "  },\n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$TEAM_SLUG'],\n",
    "      'WIN %': { '$avg': {'$divide': ['$WIN_COUNT', '$GAME_COUNT']}},\n",
    "      'FREE_THROUGH_GOAL_PERCENTAGE': { '$avg': '$FREE_THROUGH_GOAL_PERCENTAGE' }\n",
    "    }\n",
    "  }\n",
    "]\n",
    ")\n",
    "CNT = 0\n",
    "for i in x:\n",
    "    CNT+= 1\n",
    "    print(i)\n",
    "print(CNT)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ef4a184",
   "metadata": {},
   "source": [
    "10. \n",
    "-- -- TEAM ANALYSIS\n",
    "-- Salary Distribution of Teams\n",
    "SELECT \n",
    "\t`team_winning_stats_with_salary`.`TEAM_SLUG` AS `TEAM_SLUG`,\n",
    "\tSUM(`team_winning_stats_with_salary`.`2021-2022 SALARY`) AS `2021-2022 SALARY`,\n",
    "\tSUM(`team_winning_stats_with_salary`.`2022-2023 SALARY`) AS `2022-2023 SALARY`,\n",
    "\tSUM(`team_winning_stats_with_salary`.`2023-2024 SALARY`) AS `2023-2024 SALARY`,\n",
    "\tSUM(`team_winning_stats_with_salary`.`2024-2025 SALARY`) AS `2024-2025 SALARY`,\n",
    "\tSUM(`team_winning_stats_with_salary`.`2025-2026 SALARY`) AS `2025-2026 SALARY`\n",
    "FROM \n",
    "\t`team_winning_stats_with_salary`\n",
    "GROUP BY 1;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71735b6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Team_Analysis.aggregate(\n",
    "[\n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$TEAM_SLUG'],\n",
    "      '2021-2022 SALARY': { '$sum': '$2021-2022 SALARY' },\n",
    "      '2022-2023 SALARY': { '$sum': '$2022-2023 SALARY' },\n",
    "      '2023-2024 SALARY': { '$sum': '$2023-2024 SALARY' },\n",
    "      '2024-2025 SALARY': { '$sum': '$2024-2025 SALARY' },\n",
    "      '2025-2026 SALARY': { '$sum': '$2025-2026 SALARY' }\n",
    "    }\n",
    "  }\n",
    "]\n",
    ")\n",
    "CNT = 0\n",
    "for i in x:\n",
    "    CNT+= 1\n",
    "    print(i)\n",
    "print(CNT)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bf6ecd6",
   "metadata": {},
   "source": [
    "11.\n",
    "-- Win/Loss % of Teams and Team salary vs win %\n",
    "SELECT \n",
    "\t`team_winning_stats_with_salary`.`TEAM_NAME` AS `TEAM_NAME`,\n",
    "\tMIN(`team_winning_stats_with_salary`.`YEAR_FOUNDED`) AS `YEAR_FOUNDED`,\n",
    "\tSUM(`team_winning_stats_with_salary`.`2021-2022 SALARY`) AS `2021-2022 SALARY`,\n",
    "\tSUM(`team_winning_stats_with_salary`.`TOTAL WIN %`) AS `TOTAL WIN %`,\n",
    "\tSUM(`team_winning_stats_with_salary`.`TOTAL LOSS %`) AS `TOTAL LOSS %`,\n",
    "\tSUM(`team_winning_stats_with_salary`.`HOME WIN %`) AS `HOME WIN %`,\n",
    "\tSUM(`team_winning_stats_with_salary`.`HOME LOSS %`) AS `HOME LOSS %`,\n",
    "\tSUM(`team_winning_stats_with_salary`.`AWAY WIN %`) AS `AWAY WIN %`,\n",
    "\tSUM(`team_winning_stats_with_salary`.`AWAY LOSS %`) AS `AWAY LOSS %`\n",
    "FROM \n",
    "\t`team_winning_stats_with_salary`\n",
    "GROUP BY 1;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86e3051f",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Team_Analysis.aggregate(\n",
    "[\n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$TEAM_NAME'],\n",
    "      'YEAR_FOUNDED': { '$min': '$YEAR_FOUNDED' },\n",
    "      '2021-2022 SALARY': { '$sum': '$2021-2022 SALARY' },\n",
    "      'TOTAL WIN': { '$sum': '$TOTAL WIN' },\n",
    "      'TOTAL LOSS %': { '$sum': '$TOTAL LOSS %' },\n",
    "      'HOME WIN %': { '$sum': '$HOME WIN %' },\n",
    "      'HOME LOSS %': { '$sum': '$HOME LOSS %' },\n",
    "      'AWAY WIN %': { '$sum': '$AWAY WIN %' },\n",
    "      'AWAY LOSS %': { '$sum': '$AWAY LOSS %' },\n",
    "    }\n",
    "  }\n",
    "]\n",
    ")\n",
    "CNT = 0\n",
    "for i in x:\n",
    "    CNT+= 1\n",
    "    print(i)\n",
    "print(CNT)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aae257ba",
   "metadata": {},
   "source": [
    "12. \n",
    "-- Average foul and FT % for home and away teams over the years\n",
    "SELECT \n",
    "\t`game_analysis`.`LOCATION` AS `LOCATION`,\n",
    "\t`game_analysis`.`SEASON` AS `SEASON`,\n",
    "\tAVG(`game_analysis`.`AVERGAE_FOULS`) AS `AVERGAE_FOULS`,\n",
    "\tAVG(`game_analysis`.`FREE_THROUGH_GOAL_PERCENTAGE`) AS `FREE_THROUGH_GOAL_PERCENTAGE`\n",
    "FROM \n",
    "\t`game_analysis`\n",
    "\tINNER JOIN \n",
    "    (\n",
    "\tSELECT \n",
    "\t\t`game_analysis`.`SEASON` AS `SEASON`\n",
    "\tFROM \n",
    "\t\t`game_analysis`\n",
    "\tWHERE (`game_analysis`.`SEASON` >= '2000')\n",
    "\tGROUP BY 1\n",
    "\t) `t0` \n",
    "    ON (`game_analysis`.`SEASON` = `t0`.`SEASON`)\n",
    "GROUP BY 1,2;\n",
    "\n",
    "\n",
    "SELECT \n",
    "\t`game_analysis`.`LOCATION` AS `LOCATION`,\n",
    "\t`game_analysis`.`SEASON` AS `SEASON`,\n",
    "\tAVG(`game_analysis`.`AVERGAE_FOULS`) AS `AVERGAE_FOULS`,\n",
    "\tAVG(`game_analysis`.`FREE_THROUGH_GOAL_PERCENTAGE`) AS `FREE_THROUGH_GOAL_PERCENTAGE`\n",
    "FROM \n",
    "\t`game_analysis`\n",
    "WHERE `SEASON` >= '2000'\n",
    "GROUP BY 1,2;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24dd24ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Game_Analysis.aggregate(\n",
    "[\n",
    "    {\"$match\" : {'SEASON' : {'$gte': 2000}}\n",
    "  },\n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$LOCATION', '$SEASON' ],\n",
    "      'YEAR_FOUNDED': { '$avg': '$AVERGAE_FOULS' },\n",
    "      'FREE_THROUGH_GOAL_PERCENTAGE': { '$sum': '$FREE_THROUGH_GOAL_PERCENTAGE'}\n",
    "    }\n",
    "  }\n",
    "]\n",
    ")\n",
    "CNT = 0\n",
    "for i in x:\n",
    "    CNT+= 1\n",
    "    print(i)\n",
    "print(CNT)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b57a6570",
   "metadata": {},
   "source": [
    "13. \n",
    "-- 3 point average percentage and efficiency\n",
    "-- Average 3 Point Goal Percentage of Top 5 Teams\n",
    "SELECT \n",
    "\t`game_analysis`.`SEASON` AS `SEASON`,\n",
    "\t`game_analysis`.`TEAM_NAME` AS `TEAM_NAME`,\n",
    "\tAVG(`game_analysis`.`TOTAL_AVERAGE_3_POINT_GOAL_PERCENTAGE`) AS `TOTAL_AVERAGE_3_POINT_GOAL_PERCENTAGE`\n",
    "FROM \n",
    "\t`game_analysis`\n",
    "\tINNER JOIN \n",
    "    (\n",
    "\tSELECT \n",
    "\t\t`game_analysis`.`TEAM_NAME` AS `TEAM_NAME`,\n",
    "\t\tSUM(WIN_COUNT)*100/SUM(GAME_COUNT) AS `$__alias__0`\n",
    "\tFROM \n",
    "\t\t`game_analysis`\n",
    "\tWHERE (`game_analysis`.`SEASON` >= '2000')\n",
    "\tGROUP BY 1\n",
    "\tORDER BY `$__alias__0` DESC,`TEAM_NAME` ASC\n",
    "\tLIMIT 5\n",
    "\t) `t0` \n",
    "    ON (`game_analysis`.`TEAM_NAME` <=> `t0`.`TEAM_NAME`)\n",
    "WHERE (`game_analysis`.`SEASON` >= '2000')\n",
    "GROUP BY 1,2;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f68e7560",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Game_Analysis.aggregate(\n",
    "[\n",
    "  {\"$match\" : {'SEASON' : {'$gte': 2000}}\n",
    "  },\n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$TEAM_NAME'],\n",
    "      'WIN_COUNT': { '$sum': '$WIN_COUNT' },\n",
    "      'GAME_COUNT': { '$sum': '$GAME_COUNT' }\n",
    "    }\n",
    "  },\n",
    "  {\n",
    "    '$set': {\n",
    "      'win_percentage': {'$multiply':[{'$divide': ['$WIN_COUNT', '$GAME_COUNT']}, 100] }\n",
    "    }\n",
    "  },\n",
    "  { '$sort' : {'win_percentage':-1, 'TEAM_name':1} },\n",
    "  { '$limit' : 5 }\n",
    "]\n",
    ")\n",
    "CNT = 0\n",
    "for i in x:\n",
    "    CNT+= 1\n",
    "    print(i)\n",
    "print(CNT)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee17b723",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Game_Analysis.aggregate(\n",
    "[\n",
    "{'Var1':  \n",
    "{\n",
    " {\"$match\" : {'SEASON' : {'$gte': 2000}}\n",
    "  }, \n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$TEAM_NAME'],\n",
    "      'WIN_COUNT': { '$sum': '$WIN_COUNT' },\n",
    "      'GAME_COUNT': { '$sum': '$GAME_COUNT' }\n",
    "    }\n",
    "  },\n",
    "  {\n",
    "    '$set': {\n",
    "      'win_percentage': {'$multiply':[{'$divide': ['$WIN_COUNT', '$GAME_COUNT']}, 100] }\n",
    "    }\n",
    "  },\n",
    "  { '$sort' : {'win_percentage':-1, 'TEAM_name':1} },\n",
    "  { '$limit' : 5 }\n",
    " }},\n",
    "{\n",
    "    \"$match\" : {'TEAM_NAME' : {'$eq': 'var1.TEAM_NAME'}}\n",
    "},\n",
    "{\n",
    "    '$group': {\n",
    "      '_id': ['$SEASON','$TEAM_NAME'],\n",
    "      'TOTAL_AVERAGE_3_POINT_GOAL_PERCENTAGE': { '$sum': '$TOTAL_AVERAGE_3_POINT_GOAL_PERCENTAGE'}\n",
    "    }\n",
    "  }\n",
    "]\n",
    ")\n",
    "CNT = 0\n",
    "for i in x:\n",
    "    CNT+= 1\n",
    "    print(i)\n",
    "print(CNT)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42b4f32a",
   "metadata": {},
   "source": [
    "14. \n",
    "-- PLAYER ANALYSIS\n",
    "-- Player Salary Contract Type Distribution\n",
    "SELECT \n",
    "\t`player_stats_with_salary`.`2021 - 2022 CONTRACT TYPE` AS `2021 - 2022 CONTRACT TYPE`,\n",
    "\tCOUNT(DISTINCT `player_stats_with_salary`.`PLAYER_ID`) AS `COUNT_OF_PLAYERS`\n",
    "FROM \n",
    "\t`player_stats_with_salary`\n",
    "\tINNER JOIN \n",
    "\t`team_winning_stats_with_salary` \n",
    "    ON (`player_stats_with_salary`.`TEAM_ID` = `team_winning_stats_with_salary`.`TEAM_ID`)\n",
    "WHERE \n",
    "\t(\n",
    "    (NOT ISNULL(`player_stats_with_salary`.`2021 - 2022 SALARY`)) \n",
    "    AND \n",
    "    (`team_winning_stats_with_salary`.`TEAM_NAME` >= 'Atlanta Hawks') \n",
    "    AND \n",
    "    (`team_winning_stats_with_salary`.`TEAM_NAME` <= 'Washington Wizards')\n",
    "    )\n",
    "GROUP BY 1;\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ec0b418",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Player_Analysis.aggregate(\n",
    "[\n",
    "    {\"$match\" : {'2021 - 2022 SALARY' : {'$ne':'null'}}\n",
    "  },\n",
    "    {\n",
    "    '$group': {\n",
    "      '_id': ['$2021 - 2022 CONTRACT TYPE', '$PLAYER_ID'],\n",
    "      'number': { '$sum': 1}\n",
    "    }\n",
    "  },\n",
    "     {\n",
    "    '$group': {\n",
    "        '_id': ['$_id.2021 - 2022 CONTRACT TYPE'],\n",
    "      'number': { '$sum': '$number'}\n",
    "    }\n",
    "     }\n",
    "]\n",
    ")\n",
    "CNT = 0\n",
    "for i in x:\n",
    "    CNT+= 1\n",
    "    print(i)\n",
    "print(CNT)\n",
    "\n",
    "# { $group : { _id : { \"account\" : \"$account\", \"vendor\" : \"$vendor\" }, number : { $sum : 1 } } },\n",
    "# { $group : { _id : \"$_id.2021 - 2022 CONTRACT TYPE\", number : { $sum : 1 } } }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e10ebb1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
